---
const { photo, name, responsibilities, email } = Astro.props;

// Create a truncated version of the responsibilities for the preview
const previewText = responsibilities.length > 150 
  ? responsibilities.substring(0, 150) + "..." 
  : responsibilities;
---

<article class="rounded-xl shadow-lg bg-white dark:bg-gray-800 transition-all hover:shadow-xl max-w-3xl mx-auto my-6">
  <!-- Desktop layout (hidden on mobile) -->
  <div class="hidden md:flex flex-row overflow-hidden h-[350px]">
    <div class="relative w-1/3 flex-shrink-0">
      <img
        src={photo}
        alt={`Portrait of ${name}`}
        class="w-full h-full object-cover object-center grayscale hover:grayscale-0 transition-all duration-300"
      />
      <div class="absolute inset-0 bg-gradient-to-t from-emerald-600/70 to-transparent opacity-25"></div>
    </div>
    
    <div class="flex flex-col gap-5 p-8 w-2/3 bg-gradient-to-r from-emerald-50 to-white dark:from-gray-800 dark:to-gray-900">
      <header>
        <h2 class="text-3xl font-semibold text-gray-800 dark:text-white">
          {name}
        </h2>
        <div class="h-1 w-20 bg-emerald-500 mt-2 rounded-full"></div>
      </header>
      
      <p class="text-gray-600 dark:text-gray-300 leading-relaxed">
        {responsibilities}
      </p>
      
      <a 
        href={`mailto:${email}`} 
        class="group flex items-center w-fit mt-auto"
      >
        <span class="text-emerald-600 dark:text-emerald-400 font-medium group-hover:text-emerald-700 dark:group-hover:text-emerald-300 transition-colors">
          {email}
        </span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1 text-emerald-600 dark:text-emerald-400 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
        </svg>
      </a>
    </div>
  </div>
  
  <!-- Mobile layout (hidden on desktop) -->
  <div class="md:hidden p-5 bg-gradient-to-br from-emerald-50 to-white dark:from-gray-800 dark:to-gray-900">
    <header class="border-l-4 border-emerald-500 pl-3 mb-4">
      <h2 class="text-xl font-semibold text-gray-800 dark:text-white">
        {name}
      </h2>
    </header>
    
    <!-- Only show the preview text initially -->
    <div class="bio-content">
      <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-4 bio-preview">
        {previewText}
      </p>
      
      <!-- Only show the full bio when expanded -->
      <div class="full-bio hidden mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
        <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed">
          {responsibilities}
        </p>
      </div>
    </div>
    
    <div class="flex justify-between items-center mt-4">
      <a 
        href={`mailto:${email}`} 
        class="group flex items-center"
      >
        <span class="text-emerald-600 dark:text-emerald-400 text-sm font-medium group-hover:text-emerald-700 dark:group-hover:text-emerald-300 transition-colors">
          {email}
        </span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 text-emerald-600 dark:text-emerald-400 group-hover:translate-x-1 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
        </svg>
      </a>
      
      <!-- Only show the Read More button if the text is actually truncated -->
      {responsibilities.length > 150 && (
        <button 
          class="text-xs text-emerald-600 dark:text-emerald-400 hover:underline read-more-btn"
          aria-expanded="false"
        >
          Read more
        </button>
      )}
    </div>
  </div>
</article>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const readMoreBtns = document.querySelectorAll('.read-more-btn');
    
    readMoreBtns.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        // Type assertion to ensure button is an HTMLElement
        const target = e.currentTarget;
        if (!(target instanceof HTMLElement)) return;
        
        const button = target as HTMLButtonElement;
        
        // Find the container and elements
        const container = button.closest('.md\\:hidden');
        if (!container) return;
        
        const bioContent = container.querySelector('.bio-content');
        if (!bioContent) return;
        
        const bioPreview = bioContent.querySelector('.bio-preview');
        const fullBio = bioContent.querySelector('.full-bio');
        if (!bioPreview || !fullBio) return;
        
        // Check if the button is expanded
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          // If expanded, hide the full bio and show the preview
          fullBio.classList.add('hidden');
          bioPreview.classList.remove('hidden');
          button.textContent = 'Read more';
          button.setAttribute('aria-expanded', 'false');
        } else {
          // If not expanded, show the full bio and hide the preview
          fullBio.classList.remove('hidden');
          bioPreview.classList.add('hidden');
          button.textContent = 'Read less';
          button.setAttribute('aria-expanded', 'true');
        }
      });
    });
  });
</script>
